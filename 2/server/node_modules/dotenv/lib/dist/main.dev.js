"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var fs = require('fs');

var path = require('path');

var os = require('os');

var crypto = require('crypto');

var packageJson = require('../package.json');

var version = packageJson.version;
var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg; // Parse src into an Object

function parse(src) {
  var obj = {}; // Convert buffer to string

  var lines = src.toString(); // Convert line breaks to same format

  lines = lines.replace(/\r\n?/mg, '\n');
  var match;

  while ((match = LINE.exec(lines)) != null) {
    var key = match[1]; // Default undefined or null to empty string

    var value = match[2] || ''; // Remove whitespace

    value = value.trim(); // Check if double quoted

    var maybeQuote = value[0]; // Remove surrounding quotes

    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2'); // Expand newlines if double quoted

    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n');
      value = value.replace(/\\r/g, '\r');
    } // Add to object


    obj[key] = value;
  }

  return obj;
}

function _parseVault(options) {
  var vaultPath = _vaultPath(options); // Parse .env.vault


  var result = DotenvModule.configDotenv({
    path: vaultPath
  });

  if (!result.parsed) {
    var err = new Error("MISSING_DATA: Cannot parse ".concat(vaultPath, " for an unknown reason"));
    err.code = 'MISSING_DATA';
    throw err;
  } // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"


  var keys = _dotenvKey(options).split(',');

  var length = keys.length;
  var decrypted;

  for (var i = 0; i < length; i++) {
    try {
      // Get full key
      var key = keys[i].trim(); // Get instructions for decrypt

      var attrs = _instructions(result, key); // Decrypt


      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
      break;
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error;
      } // try next key

    }
  } // Parse decrypted .env string


  return DotenvModule.parse(decrypted);
}

function _log(message) {
  console.log("[dotenv@".concat(version, "][INFO] ").concat(message));
}

function _warn(message) {
  console.log("[dotenv@".concat(version, "][WARN] ").concat(message));
}

function _debug(message) {
  console.log("[dotenv@".concat(version, "][DEBUG] ").concat(message));
}

function _dotenvKey(options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY;
  } // secondary infra already contains a DOTENV_KEY environment variable


  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY;
  } // fallback to empty string


  return '';
}

function _instructions(result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  var uri;

  try {
    uri = new URL(dotenvKey);
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      var err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development');
      err.code = 'INVALID_DOTENV_KEY';
      throw err;
    }

    throw error;
  } // Get decrypt key


  var key = uri.password;

  if (!key) {
    var _err = new Error('INVALID_DOTENV_KEY: Missing key part');

    _err.code = 'INVALID_DOTENV_KEY';
    throw _err;
  } // Get environment


  var environment = uri.searchParams.get('environment');

  if (!environment) {
    var _err2 = new Error('INVALID_DOTENV_KEY: Missing environment part');

    _err2.code = 'INVALID_DOTENV_KEY';
    throw _err2;
  } // Get ciphertext payload


  var environmentKey = "DOTENV_VAULT_".concat(environment.toUpperCase());
  var ciphertext = result.parsed[environmentKey]; // DOTENV_VAULT_PRODUCTION

  if (!ciphertext) {
    var _err3 = new Error("NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ".concat(environmentKey, " in your .env.vault file."));

    _err3.code = 'NOT_FOUND_DOTENV_ENVIRONMENT';
    throw _err3;
  }

  return {
    ciphertext: ciphertext,
    key: key
  };
}

function _vaultPath(options) {
  var possibleVaultPath = null;

  if (options && options.path && options.path.length > 0) {
    if (Array.isArray(options.path)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = options.path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var filepath = _step.value;

          if (fs.existsSync(filepath)) {
            possibleVaultPath = filepath.endsWith('.vault') ? filepath : "".concat(filepath, ".vault");
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      possibleVaultPath = options.path.endsWith('.vault') ? options.path : "".concat(options.path, ".vault");
    }
  } else {
    possibleVaultPath = path.resolve(process.cwd(), '.env.vault');
  }

  if (fs.existsSync(possibleVaultPath)) {
    return possibleVaultPath;
  }

  return null;
}

function _resolveHome(envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;
}

function _configVault(options) {
  _log('Loading env from encrypted .env.vault');

  var parsed = DotenvModule._parseVault(options);

  var processEnv = process.env;

  if (options && options.processEnv != null) {
    processEnv = options.processEnv;
  }

  DotenvModule.populate(processEnv, parsed, options);
  return {
    parsed: parsed
  };
}

function configDotenv(options) {
  var dotenvPath = path.resolve(process.cwd(), '.env');
  var encoding = 'utf8';
  var debug = Boolean(options && options.debug);

  if (options && options.encoding) {
    encoding = options.encoding;
  } else {
    if (debug) {
      _debug('No encoding is specified. UTF-8 is used by default');
    }
  }

  var optionPaths = [dotenvPath]; // default, look for .env

  if (options && options.path) {
    if (!Array.isArray(options.path)) {
      optionPaths = [_resolveHome(options.path)];
    } else {
      optionPaths = []; // reset default

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = options.path[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var filepath = _step2.value;
          optionPaths.push(_resolveHome(filepath));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
  // parsed data, we will combine it with process.env (or options.processEnv if provided).


  var lastError;
  var parsedAll = {};

  for (var _i = 0, _optionPaths = optionPaths; _i < _optionPaths.length; _i++) {
    var _path = _optionPaths[_i];

    try {
      // Specifying an encoding returns a string instead of a buffer
      var parsed = DotenvModule.parse(fs.readFileSync(_path, {
        encoding: encoding
      }));
      DotenvModule.populate(parsedAll, parsed, options);
    } catch (e) {
      if (debug) {
        _debug("Failed to load ".concat(_path, " ").concat(e.message));
      }

      lastError = e;
    }
  }

  var processEnv = process.env;

  if (options && options.processEnv != null) {
    processEnv = options.processEnv;
  }

  DotenvModule.populate(processEnv, parsedAll, options);

  if (lastError) {
    return {
      parsed: parsedAll,
      error: lastError
    };
  } else {
    return {
      parsed: parsedAll
    };
  }
} // Populates process.env from .env file


function config(options) {
  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options);
  }

  var vaultPath = _vaultPath(options); // dotenvKey exists but .env.vault file does not exist


  if (!vaultPath) {
    _warn("You set DOTENV_KEY but you are missing a .env.vault file at ".concat(vaultPath, ". Did you forget to build it?"));

    return DotenvModule.configDotenv(options);
  }

  return DotenvModule._configVault(options);
}

function decrypt(encrypted, keyStr) {
  var key = Buffer.from(keyStr.slice(-64), 'hex');
  var ciphertext = Buffer.from(encrypted, 'base64');
  var nonce = ciphertext.subarray(0, 12);
  var authTag = ciphertext.subarray(-16);
  ciphertext = ciphertext.subarray(12, -16);

  try {
    var aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);
    aesgcm.setAuthTag(authTag);
    return "".concat(aesgcm.update(ciphertext)).concat(aesgcm["final"]());
  } catch (error) {
    var isRange = error instanceof RangeError;
    var invalidKeyLength = error.message === 'Invalid key length';
    var decryptionFailed = error.message === 'Unsupported state or unable to authenticate data';

    if (isRange || invalidKeyLength) {
      var err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)');
      err.code = 'INVALID_DOTENV_KEY';
      throw err;
    } else if (decryptionFailed) {
      var _err4 = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY');

      _err4.code = 'DECRYPTION_FAILED';
      throw _err4;
    } else {
      throw error;
    }
  }
} // Populate process.env with parsed values


function populate(processEnv, parsed) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var debug = Boolean(options && options.debug);
  var override = Boolean(options && options.override);

  if (_typeof(parsed) !== 'object') {
    var err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');
    err.code = 'OBJECT_REQUIRED';
    throw err;
  } // Set process.env


  for (var _i2 = 0, _Object$keys = Object.keys(parsed); _i2 < _Object$keys.length; _i2++) {
    var key = _Object$keys[_i2];

    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key];
      }

      if (debug) {
        if (override === true) {
          _debug("\"".concat(key, "\" is already defined and WAS overwritten"));
        } else {
          _debug("\"".concat(key, "\" is already defined and was NOT overwritten"));
        }
      }
    } else {
      processEnv[key] = parsed[key];
    }
  }
}

var DotenvModule = {
  configDotenv: configDotenv,
  _configVault: _configVault,
  _parseVault: _parseVault,
  config: config,
  decrypt: decrypt,
  parse: parse,
  populate: populate
};
module.exports.configDotenv = DotenvModule.configDotenv;
module.exports._configVault = DotenvModule._configVault;
module.exports._parseVault = DotenvModule._parseVault;
module.exports.config = DotenvModule.config;
module.exports.decrypt = DotenvModule.decrypt;
module.exports.parse = DotenvModule.parse;
module.exports.populate = DotenvModule.populate;
module.exports = DotenvModule;
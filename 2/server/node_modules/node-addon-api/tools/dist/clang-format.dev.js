#!/usr/bin/env node
"use strict";

var spawn = require('child_process').spawnSync;

var path = require('path');

var filesToCheck = ['*.h', '*.cc'];
var FORMAT_START = process.env.FORMAT_START || 'main';

function main(args) {
  var fix = false;

  while (args.length > 0) {
    switch (args[0]) {
      case '-f':
      case '--fix':
        fix = true;
        break;

      default:
    }

    args.shift();
  }

  var clangFormatPath = path.dirname(require.resolve('clang-format'));
  var binary = process.platform === 'win32' ? 'node_modules\\.bin\\clang-format.cmd' : 'node_modules/.bin/clang-format';
  var options = ['--binary=' + binary, '--style=file'];

  if (fix) {
    options.push(FORMAT_START);
  } else {
    options.push('--diff', FORMAT_START);
  }

  var gitClangFormatPath = path.join(clangFormatPath, 'bin/git-clang-format');
  var result = spawn('python', [gitClangFormatPath].concat(options, ['--'], filesToCheck), {
    encoding: 'utf-8'
  });

  if (result.stderr) {
    console.error('Error running git-clang-format:', result.stderr);
    return 2;
  }

  var clangFormatOutput = result.stdout.trim(); // Bail fast if in fix mode.

  if (fix) {
    console.log(clangFormatOutput);
    return 0;
  } // Detect if there is any complains from clang-format


  if (clangFormatOutput !== '' && clangFormatOutput !== 'no modified files to format' && clangFormatOutput !== 'clang-format did not modify any files') {
    console.error(clangFormatOutput);
    var fixCmd = 'npm run lint:fix';
    console.error("\n      ERROR: please run \"".concat(fixCmd, "\" to format changes in your commit\n        Note that when running the command locally, please keep your local\n        main branch and working branch up to date with nodejs/node-addon-api\n        to exclude un-related complains.\n        Or you can run \"env FORMAT_START=upstream/main ").concat(fixCmd, "\"."));
    return 1;
  }
}

if (require.main === module) {
  process.exitCode = main(process.argv.slice(2));
}
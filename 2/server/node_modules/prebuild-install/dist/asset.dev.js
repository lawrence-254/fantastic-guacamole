"use strict";

var get = require('simple-get');

var util = require('./util');

var proxy = require('./proxy');

function findAssetId(opts, cb) {
  var downloadUrl = util.getDownloadUrl(opts);
  var apiUrl = util.getApiUrl(opts);
  var log = opts.log || util.noopLogger;
  log.http('request', 'GET ' + apiUrl);
  var reqOpts = proxy({
    url: apiUrl,
    json: true,
    headers: {
      'User-Agent': 'simple-get',
      Authorization: 'token ' + opts.token
    }
  }, opts);
  var req = get.concat(reqOpts, function (err, res, data) {
    if (err) return cb(err);
    log.http(res.statusCode, apiUrl);
    if (res.statusCode !== 200) return cb(err); // Find asset id in release

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var release = _step.value;

        if (release.tag_name === opts['tag-prefix'] + opts.pkg.version) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = release.assets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var asset = _step2.value;

              if (asset.browser_download_url === downloadUrl) {
                return cb(null, asset.id);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    cb(new Error('Could not find GitHub release for version'));
  });
  req.setTimeout(30 * 1000, function () {
    req.abort();
  });
}

module.exports = findAssetId;
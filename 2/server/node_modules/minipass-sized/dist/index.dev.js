"use strict";

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Minipass = require('minipass');

var SizeError =
/*#__PURE__*/
function (_Error) {
  _inherits(SizeError, _Error);

  function SizeError(found, expect) {
    var _this;

    _classCallCheck(this, SizeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SizeError).call(this, "Bad data size: expected ".concat(expect, " bytes, but got ").concat(found)));
    _this.expect = expect;
    _this.found = found;
    _this.code = 'EBADSIZE';
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  _createClass(SizeError, [{
    key: "name",
    get: function get() {
      return 'SizeError';
    }
  }]);

  return SizeError;
}(_wrapNativeSuper(Error));

var MinipassSized =
/*#__PURE__*/
function (_Minipass) {
  _inherits(MinipassSized, _Minipass);

  function MinipassSized() {
    var _this2;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MinipassSized);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MinipassSized).call(this, options));
    if (options.objectMode) throw new TypeError("".concat(_this2.constructor.name, " streams only work with string and buffer data"));
    _this2.found = 0;
    _this2.expect = options.size;
    if (typeof _this2.expect !== 'number' || _this2.expect > Number.MAX_SAFE_INTEGER || isNaN(_this2.expect) || _this2.expect < 0 || !isFinite(_this2.expect) || _this2.expect !== Math.floor(_this2.expect)) throw new Error('invalid expected size: ' + _this2.expect);
    return _this2;
  }

  _createClass(MinipassSized, [{
    key: "write",
    value: function write(chunk, encoding, cb) {
      var buffer = Buffer.isBuffer(chunk) ? chunk : typeof chunk === 'string' ? Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8') : chunk;

      if (!Buffer.isBuffer(buffer)) {
        this.emit('error', new TypeError("".concat(this.constructor.name, " streams only work with string and buffer data")));
        return false;
      }

      this.found += buffer.length;
      if (this.found > this.expect) this.emit('error', new SizeError(this.found, this.expect));
      return _get(_getPrototypeOf(MinipassSized.prototype), "write", this).call(this, chunk, encoding, cb);
    }
  }, {
    key: "emit",
    value: function emit(ev) {
      var _get2;

      if (ev === 'end') {
        if (this.found !== this.expect) this.emit('error', new SizeError(this.found, this.expect));
      }

      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      return (_get2 = _get(_getPrototypeOf(MinipassSized.prototype), "emit", this)).call.apply(_get2, [this, ev].concat(data));
    }
  }]);

  return MinipassSized;
}(Minipass);

MinipassSized.SizeError = SizeError;
module.exports = MinipassSized;
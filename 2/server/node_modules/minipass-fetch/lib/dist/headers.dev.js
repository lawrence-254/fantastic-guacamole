'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

var validateName = function validateName(name) {
  name = "".concat(name);
  if (invalidTokenRegex.test(name) || name === '') throw new TypeError("".concat(name, " is not a legal HTTP header name"));
};

var validateValue = function validateValue(value) {
  value = "".concat(value);
  if (invalidHeaderCharRegex.test(value)) throw new TypeError("".concat(value, " is not a legal HTTP header value"));
};

var find = function find(map, name) {
  name = name.toLowerCase();

  for (var key in map) {
    if (key.toLowerCase() === name) return key;
  }

  return undefined;
};

var MAP = Symbol('map');

var Headers =
/*#__PURE__*/
function () {
  function Headers() {
    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, Headers);

    this[MAP] = Object.create(null);

    if (init instanceof Headers) {
      var rawHeaders = init.raw();
      var headerNames = Object.keys(rawHeaders);

      for (var _i = 0, _headerNames = headerNames; _i < _headerNames.length; _i++) {
        var headerName = _headerNames[_i];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = rawHeaders[headerName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var value = _step.value;
            this.append(headerName, value);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return;
    } // no-op


    if (init === undefined || init === null) return;

    if (_typeof(init) === 'object') {
      var method = init[Symbol.iterator];

      if (method !== null && method !== undefined) {
        if (typeof method !== 'function') throw new TypeError('Header pairs must be iterable'); // sequence<sequence<ByteString>>
        // Note: per spec we have to first exhaust the lists then process them

        var pairs = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = init[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var pair = _step2.value;
            if (_typeof(pair) !== 'object' || typeof pair[Symbol.iterator] !== 'function') throw new TypeError('Each header pair must be iterable');
            var arrPair = Array.from(pair);
            if (arrPair.length !== 2) throw new TypeError('Each header pair must be a name/value tuple');
            pairs.push(arrPair);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        for (var _i2 = 0, _pairs = pairs; _i2 < _pairs.length; _i2++) {
          var _pair = _pairs[_i2];
          this.append(_pair[0], _pair[1]);
        }
      } else {
        // record<ByteString, ByteString>
        for (var _i3 = 0, _Object$keys = Object.keys(init); _i3 < _Object$keys.length; _i3++) {
          var key = _Object$keys[_i3];
          this.append(key, init[key]);
        }
      }
    } else throw new TypeError('Provided initializer must be an object');
  }

  _createClass(Headers, [{
    key: "get",
    value: function get(name) {
      name = "".concat(name);
      validateName(name);
      var key = find(this[MAP], name);
      if (key === undefined) return null;
      return this[MAP][key].join(', ');
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var pairs = getHeaders(this);

      for (var i = 0; i < pairs.length; i++) {
        var _pairs$i = _slicedToArray(pairs[i], 2),
            name = _pairs$i[0],
            value = _pairs$i[1];

        callback.call(thisArg, value, name, this); // refresh in case the callback added more headers

        pairs = getHeaders(this);
      }
    }
  }, {
    key: "set",
    value: function set(name, value) {
      name = "".concat(name);
      value = "".concat(value);
      validateName(name);
      validateValue(value);
      var key = find(this[MAP], name);
      this[MAP][key !== undefined ? key : name] = [value];
    }
  }, {
    key: "append",
    value: function append(name, value) {
      name = "".concat(name);
      value = "".concat(value);
      validateName(name);
      validateValue(value);
      var key = find(this[MAP], name);
      if (key !== undefined) this[MAP][key].push(value);else this[MAP][name] = [value];
    }
  }, {
    key: "has",
    value: function has(name) {
      name = "".concat(name);
      validateName(name);
      return find(this[MAP], name) !== undefined;
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      name = "".concat(name);
      validateName(name);
      var key = find(this[MAP], name);
      if (key !== undefined) delete this[MAP][key];
    }
  }, {
    key: "raw",
    value: function raw() {
      return this[MAP];
    }
  }, {
    key: "keys",
    value: function keys() {
      return new HeadersIterator(this, 'key');
    }
  }, {
    key: "values",
    value: function values() {
      return new HeadersIterator(this, 'value');
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return new HeadersIterator(this, 'key+value');
    }
  }, {
    key: "entries",
    value: function entries() {
      return new HeadersIterator(this, 'key+value');
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Headers';
    }
  }], [{
    key: "exportNodeCompatibleHeaders",
    value: function exportNodeCompatibleHeaders(headers) {
      var obj = Object.assign(Object.create(null), headers[MAP]); // http.request() only supports string as Host header. This hack makes
      // specifying custom Host header possible.

      var hostHeaderKey = find(headers[MAP], 'Host');
      if (hostHeaderKey !== undefined) obj[hostHeaderKey] = obj[hostHeaderKey][0];
      return obj;
    }
  }, {
    key: "createHeadersLenient",
    value: function createHeadersLenient(obj) {
      var headers = new Headers();

      for (var _i4 = 0, _Object$keys2 = Object.keys(obj); _i4 < _Object$keys2.length; _i4++) {
        var name = _Object$keys2[_i4];
        if (invalidTokenRegex.test(name)) continue;

        if (Array.isArray(obj[name])) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = obj[name][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var val = _step3.value;
              if (invalidHeaderCharRegex.test(val)) continue;
              if (headers[MAP][name] === undefined) headers[MAP][name] = [val];else headers[MAP][name].push(val);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) headers[MAP][name] = [obj[name]];
      }

      return headers;
    }
  }]);

  return Headers;
}();

Object.defineProperties(Headers.prototype, {
  get: {
    enumerable: true
  },
  forEach: {
    enumerable: true
  },
  set: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  has: {
    enumerable: true
  },
  "delete": {
    enumerable: true
  },
  keys: {
    enumerable: true
  },
  values: {
    enumerable: true
  },
  entries: {
    enumerable: true
  }
});

var getHeaders = function getHeaders(headers) {
  var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
  return Object.keys(headers[MAP]).sort().map(kind === 'key' ? function (k) {
    return k.toLowerCase();
  } : kind === 'value' ? function (k) {
    return headers[MAP][k].join(', ');
  } : function (k) {
    return [k.toLowerCase(), headers[MAP][k].join(', ')];
  });
};

var INTERNAL = Symbol('internal');

var HeadersIterator =
/*#__PURE__*/
function () {
  function HeadersIterator(target, kind) {
    _classCallCheck(this, HeadersIterator);

    this[INTERNAL] = {
      target: target,
      kind: kind,
      index: 0
    };
  }

  _createClass(HeadersIterator, [{
    key: "next",
    value: function next() {
      /* istanbul ignore if: should be impossible */
      if (!this || Object.getPrototypeOf(this) !== HeadersIterator.prototype) throw new TypeError('Value of `this` is not a HeadersIterator');
      var _this$INTERNAL = this[INTERNAL],
          target = _this$INTERNAL.target,
          kind = _this$INTERNAL.kind,
          index = _this$INTERNAL.index;
      var values = getHeaders(target, kind);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      this[INTERNAL].index++;
      return {
        value: values[index],
        done: false
      };
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'HeadersIterator';
    }
  }]);

  return HeadersIterator;
}(); // manually extend because 'extends' requires a ctor


Object.setPrototypeOf(HeadersIterator.prototype, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
module.exports = Headers;
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var http = require('http');

var STATUS_CODES = http.STATUS_CODES;

var Headers = require('./headers.js');

var Body = require('./body.js');

var _clone = Body.clone,
    extractContentType = Body.extractContentType;
var INTERNALS = Symbol('Response internals');

var Response =
/*#__PURE__*/
function (_Body) {
  _inherits(Response, _Body);

  function Response() {
    var _this;

    var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Response);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Response).call(this, body, opts));
    var status = opts.status || 200;
    var headers = new Headers(opts.headers);

    if (body !== null && body !== undefined && !headers.has('Content-Type')) {
      var contentType = extractContentType(body);
      if (contentType) headers.append('Content-Type', contentType);
    }

    _this[INTERNALS] = {
      url: opts.url,
      status: status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers: headers,
      counter: opts.counter,
      trailer: Promise.resolve(opts.trailer || new Headers())
    };
    return _this;
  }

  _createClass(Response, [{
    key: "clone",
    value: function clone() {
      return new Response(_clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected,
        trailer: this.trailer
      });
    }
  }, {
    key: "trailer",
    get: function get() {
      return this[INTERNALS].trailer;
    }
  }, {
    key: "url",
    get: function get() {
      return this[INTERNALS].url || '';
    }
  }, {
    key: "status",
    get: function get() {
      return this[INTERNALS].status;
    }
  }, {
    key: "ok",
    get: function get() {
      return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;
    }
  }, {
    key: "redirected",
    get: function get() {
      return this[INTERNALS].counter > 0;
    }
  }, {
    key: "statusText",
    get: function get() {
      return this[INTERNALS].statusText;
    }
  }, {
    key: "headers",
    get: function get() {
      return this[INTERNALS].headers;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Response';
    }
  }]);

  return Response;
}(Body);

module.exports = Response;
Object.defineProperties(Response.prototype, {
  url: {
    enumerable: true
  },
  status: {
    enumerable: true
  },
  ok: {
    enumerable: true
  },
  redirected: {
    enumerable: true
  },
  statusText: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  clone: {
    enumerable: true
  }
});
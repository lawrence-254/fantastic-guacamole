'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var errcode = require('../index');

var expect = require('expect.js');

describe('errcode', function () {
  describe('string as first argument', function () {
    it('should throw an error', function () {
      expect(function () {
        errcode('my message');
      }).to.throwError(function (err) {
        expect(err).to.be.a(TypeError);
      });
    });
  });
  describe('error as first argument', function () {
    it('should accept an error and do nothing', function () {
      var myErr = new Error('my message');
      var err = errcode(myErr);
      expect(err).to.be(myErr);
      expect(err.hasOwnProperty(err.code)).to.be(false);
    });
    it('should accept an error and add a code', function () {
      var myErr = new Error('my message');
      var err = errcode(myErr, 'ESOME');
      expect(err).to.be(myErr);
      expect(err.code).to.be('ESOME');
    });
    it('should accept an error object and add code & properties', function () {
      var myErr = new Error('my message');
      var err = errcode(myErr, 'ESOME', {
        foo: 'bar',
        bar: 'foo'
      });
      expect(err).to.be.an(Error);
      expect(err.code).to.be('ESOME');
      expect(err.foo).to.be('bar');
      expect(err.bar).to.be('foo');
    });
    it('should create an error object without code but with properties', function () {
      var myErr = new Error('my message');
      var err = errcode(myErr, {
        foo: 'bar',
        bar: 'foo'
      });
      expect(err).to.be.an(Error);
      expect(err.code).to.be(undefined);
      expect(err.foo).to.be('bar');
      expect(err.bar).to.be('foo');
    });
    it('should set a non-writable field', function () {
      var myErr = new Error('my message');
      Object.defineProperty(myErr, 'code', {
        value: 'derp',
        writable: false
      });
      var err = errcode(myErr, 'ERR_WAT');
      expect(err).to.be.an(Error);
      expect(err.stack).to.equal(myErr.stack);
      expect(err.code).to.be('ERR_WAT');
    });
    it('should add a code to frozen object', function () {
      var myErr = new Error('my message');
      var err = errcode(Object.freeze(myErr), 'ERR_WAT');
      expect(err).to.be.an(Error);
      expect(err.stack).to.equal(myErr.stack);
      expect(err.code).to.be('ERR_WAT');
    });
    it('should to set a field that throws at assignment time', function () {
      var myErr = new Error('my message');
      Object.defineProperty(myErr, 'code', {
        enumerable: true,
        set: function set() {
          throw new Error('Nope!');
        },
        get: function get() {
          return 'derp';
        }
      });
      var err = errcode(myErr, 'ERR_WAT');
      expect(err).to.be.an(Error);
      expect(err.stack).to.equal(myErr.stack);
      expect(err.code).to.be('ERR_WAT');
    });
    it('should retain error type', function () {
      var myErr = new TypeError('my message');
      Object.defineProperty(myErr, 'code', {
        value: 'derp',
        writable: false
      });
      var err = errcode(myErr, 'ERR_WAT');
      expect(err).to.be.a(TypeError);
      expect(err.stack).to.equal(myErr.stack);
      expect(err.code).to.be('ERR_WAT');
    });
    it('should add a code to a class that extends Error', function () {
      var CustomError =
      /*#__PURE__*/
      function (_Error) {
        _inherits(CustomError, _Error);

        function CustomError() {
          _classCallCheck(this, CustomError);

          return _possibleConstructorReturn(this, _getPrototypeOf(CustomError).apply(this, arguments));
        }

        _createClass(CustomError, [{
          key: "code",
          set: function set(val) {
            throw new Error('Nope!');
          }
        }]);

        return CustomError;
      }(_wrapNativeSuper(Error));

      var myErr = new CustomError('my message');
      Object.defineProperty(myErr, 'code', {
        value: 'derp',
        writable: false,
        configurable: false
      });
      var err = errcode(myErr, 'ERR_WAT');
      expect(err).to.be.a(CustomError);
      expect(err.stack).to.equal(myErr.stack);
      expect(err.code).to.be('ERR_WAT'); // original prototype chain should be intact

      expect(function () {
        var otherErr = new CustomError('my message');
        otherErr.code = 'derp';
      }).to.throwError();
    });
    it('should support errors that are not Errors', function () {
      var err = errcode({
        message: 'Oh noes!'
      }, 'ERR_WAT');
      expect(err.message).to.be('Oh noes!');
      expect(err.code).to.be('ERR_WAT');
    });
  });
  describe('falsy first arguments', function () {
    it('should not allow passing null as the first argument', function () {
      expect(function () {
        errcode(null);
      }).to.throwError(function (err) {
        expect(err).to.be.a(TypeError);
      });
    });
    it('should not allow passing undefined as the first argument', function () {
      expect(function () {
        errcode(undefined);
      }).to.throwError(function (err) {
        expect(err).to.be.a(TypeError);
      });
    });
  });
});
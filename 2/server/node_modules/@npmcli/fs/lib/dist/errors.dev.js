'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('util'),
    inspect = _require.inspect; // adapted from node's internal/errors
// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js
// close copy of node's internal SystemError class.


var SystemError =
/*#__PURE__*/
function () {
  function SystemError(code, prefix, context) {
    _classCallCheck(this, SystemError);

    // XXX context.code is undefined in all constructors used in cp/polyfill
    // that may be a bug copied from node, maybe the constructor should use
    // `code` not `errno`?  nodejs/node#41104
    var message = "".concat(prefix, ": ").concat(context.syscall, " returned ") + "".concat(context.code, " (").concat(context.message, ")");

    if (context.path !== undefined) {
      message += " ".concat(context.path);
    }

    if (context.dest !== undefined) {
      message += " => ".concat(context.dest);
    }

    this.code = code;
    Object.defineProperties(this, {
      name: {
        value: 'SystemError',
        enumerable: false,
        writable: true,
        configurable: true
      },
      message: {
        value: message,
        enumerable: false,
        writable: true,
        configurable: true
      },
      info: {
        value: context,
        enumerable: true,
        configurable: true,
        writable: false
      },
      errno: {
        get: function get() {
          return context.errno;
        },
        set: function set(value) {
          context.errno = value;
        },
        enumerable: true,
        configurable: true
      },
      syscall: {
        get: function get() {
          return context.syscall;
        },
        set: function set(value) {
          context.syscall = value;
        },
        enumerable: true,
        configurable: true
      }
    });

    if (context.path !== undefined) {
      Object.defineProperty(this, 'path', {
        get: function get() {
          return context.path;
        },
        set: function set(value) {
          context.path = value;
        },
        enumerable: true,
        configurable: true
      });
    }

    if (context.dest !== undefined) {
      Object.defineProperty(this, 'dest', {
        get: function get() {
          return context.dest;
        },
        set: function set(value) {
          context.dest = value;
        },
        enumerable: true,
        configurable: true
      });
    }
  }

  _createClass(SystemError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: Symbol["for"]('nodejs.util.inspect.custom'),
    value: function value(_recurseTimes, ctx) {
      return inspect(this, _objectSpread({}, ctx, {
        getters: true,
        customInspect: false
      }));
    }
  }]);

  return SystemError;
}();

function E(code, message) {
  module.exports[code] =
  /*#__PURE__*/
  function (_SystemError) {
    _inherits(NodeError, _SystemError);

    function NodeError(ctx) {
      _classCallCheck(this, NodeError);

      return _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, code, message, ctx));
    }

    return NodeError;
  }(SystemError);
}

E('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory');
E('ERR_FS_CP_EEXIST', 'Target already exists');
E('ERR_FS_CP_EINVAL', 'Invalid src or dest');
E('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe');
E('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory');
E('ERR_FS_CP_SOCKET', 'Cannot copy a socket file');
E('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self');
E('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type');
E('ERR_FS_EISDIR', 'Path is a directory');

module.exports.ERR_INVALID_ARG_TYPE =
/*#__PURE__*/
function (_Error) {
  _inherits(ERR_INVALID_ARG_TYPE, _Error);

  function ERR_INVALID_ARG_TYPE(name, expected, actual) {
    var _this;

    _classCallCheck(this, ERR_INVALID_ARG_TYPE);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ERR_INVALID_ARG_TYPE).call(this));
    _this.code = 'ERR_INVALID_ARG_TYPE';
    _this.message = "The ".concat(name, " argument must be ").concat(expected, ". Received ").concat(_typeof(actual));
    return _this;
  }

  return ERR_INVALID_ARG_TYPE;
}(_wrapNativeSuper(Error));
"use strict";

var _require = require('path'),
    join = _require.join,
    sep = _require.sep;

var getOptions = require('./common/get-options.js');

var mkdir = require('./mkdir/index.js');

var mkdtemp = require('./mkdtemp.js');

var rm = require('./rm/index.js'); // create a temp directory, ensure its permissions match its parent, then call
// the supplied function passing it the path to the directory. clean up after
// the function finishes, whether it throws or not


var withTempDir = function withTempDir(root, fn, opts) {
  var options, target, err, result;
  return regeneratorRuntime.async(function withTempDir$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = getOptions(opts, {
            copy: ['tmpPrefix']
          }); // create the directory, and fix its ownership

          _context.next = 3;
          return regeneratorRuntime.awrap(mkdir(root, {
            recursive: true,
            owner: 'inherit'
          }));

        case 3:
          _context.next = 5;
          return regeneratorRuntime.awrap(mkdtemp(join("".concat(root).concat(sep), options.tmpPrefix || ''), {
            owner: 'inherit'
          }));

        case 5:
          target = _context.sent;
          _context.prev = 6;
          _context.next = 9;
          return regeneratorRuntime.awrap(fn(target));

        case 9:
          result = _context.sent;
          _context.next = 15;
          break;

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](6);
          err = _context.t0;

        case 15:
          _context.prev = 15;
          _context.next = 18;
          return regeneratorRuntime.awrap(rm(target, {
            force: true,
            recursive: true
          }));

        case 18:
          _context.next = 22;
          break;

        case 20:
          _context.prev = 20;
          _context.t1 = _context["catch"](15);

        case 22:
          if (!err) {
            _context.next = 24;
            break;
          }

          throw err;

        case 24:
          return _context.abrupt("return", result);

        case 25:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[6, 12], [15, 20]]);
};

module.exports = withTempDir;
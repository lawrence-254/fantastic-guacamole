"use strict";

var _require = require('path'),
    dirname = _require.dirname,
    sep = _require.sep;

var fs = require('./fs.js');

var getOptions = require('./common/get-options.js');

var owner = require('./common/owner.js');

var mkdtemp = function mkdtemp(prefix, opts) {
  var options, root, _ref, uid, gid, result;

  return regeneratorRuntime.async(function mkdtemp$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = getOptions(opts, {
            copy: ['encoding', 'owner'],
            wrap: 'encoding'
          }); // mkdtemp relies on the trailing path separator to indicate if it should
          // create a directory inside of the prefix. if that's the case then the root
          // we infer ownership from is the prefix itself, otherwise it's the dirname
          // /tmp -> /tmpABCDEF, infers from /
          // /tmp/ -> /tmp/ABCDEF, infers from /tmp

          root = prefix.endsWith(sep) ? prefix : dirname(prefix);
          _context.next = 4;
          return regeneratorRuntime.awrap(owner.validate(root, options.owner));

        case 4:
          _ref = _context.sent;
          uid = _ref.uid;
          gid = _ref.gid;
          _context.next = 9;
          return regeneratorRuntime.awrap(fs.mkdtemp(prefix, options));

        case 9:
          result = _context.sent;
          _context.next = 12;
          return regeneratorRuntime.awrap(owner.update(result, uid, gid));

        case 12:
          return _context.abrupt("return", result);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  });
};

module.exports = mkdtemp;
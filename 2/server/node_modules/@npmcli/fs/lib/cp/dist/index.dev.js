"use strict";

var fs = require('../fs.js');

var getOptions = require('../common/get-options.js');

var node = require('../common/node.js');

var polyfill = require('./polyfill.js'); // node 16.7.0 added fs.cp


var useNative = node.satisfies('>=16.7.0');

var cp = function cp(src, dest, opts) {
  var options;
  return regeneratorRuntime.async(function cp$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = getOptions(opts, {
            copy: ['dereference', 'errorOnExist', 'filter', 'force', 'preserveTimestamps', 'recursive']
          }); // the polyfill is tested separately from this module, no need to hack
          // process.version to try to trigger it just for coverage
          // istanbul ignore next

          return _context.abrupt("return", useNative ? fs.cp(src, dest, options) : polyfill(src, dest, options));

        case 2:
        case "end":
          return _context.stop();
      }
    }
  });
};

module.exports = cp;
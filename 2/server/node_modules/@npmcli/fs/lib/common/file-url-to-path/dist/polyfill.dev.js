"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('url'),
    URL = _require.URL,
    domainToUnicode = _require.domainToUnicode;

var CHAR_LOWERCASE_A = 97;
var CHAR_LOWERCASE_Z = 122;
var isWindows = process.platform === 'win32';

var ERR_INVALID_FILE_URL_HOST =
/*#__PURE__*/
function (_TypeError) {
  _inherits(ERR_INVALID_FILE_URL_HOST, _TypeError);

  function ERR_INVALID_FILE_URL_HOST(platform) {
    var _this;

    _classCallCheck(this, ERR_INVALID_FILE_URL_HOST);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ERR_INVALID_FILE_URL_HOST).call(this, "File URL host must be \"localhost\" or empty on ".concat(platform)));
    _this.code = 'ERR_INVALID_FILE_URL_HOST';
    return _this;
  }

  _createClass(ERR_INVALID_FILE_URL_HOST, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }]);

  return ERR_INVALID_FILE_URL_HOST;
}(_wrapNativeSuper(TypeError));

var ERR_INVALID_FILE_URL_PATH =
/*#__PURE__*/
function (_TypeError2) {
  _inherits(ERR_INVALID_FILE_URL_PATH, _TypeError2);

  function ERR_INVALID_FILE_URL_PATH(msg) {
    var _this2;

    _classCallCheck(this, ERR_INVALID_FILE_URL_PATH);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ERR_INVALID_FILE_URL_PATH).call(this, "File URL path ".concat(msg)));
    _this2.code = 'ERR_INVALID_FILE_URL_PATH';
    return _this2;
  }

  _createClass(ERR_INVALID_FILE_URL_PATH, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }]);

  return ERR_INVALID_FILE_URL_PATH;
}(_wrapNativeSuper(TypeError));

var ERR_INVALID_ARG_TYPE =
/*#__PURE__*/
function (_TypeError3) {
  _inherits(ERR_INVALID_ARG_TYPE, _TypeError3);

  function ERR_INVALID_ARG_TYPE(name, actual) {
    var _this3;

    _classCallCheck(this, ERR_INVALID_ARG_TYPE);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ERR_INVALID_ARG_TYPE).call(this, "The \"".concat(name, "\" argument must be one of type string or an instance ") + "of URL. Received type ".concat(_typeof(actual), " ").concat(actual)));
    _this3.code = 'ERR_INVALID_ARG_TYPE';
    return _this3;
  }

  _createClass(ERR_INVALID_ARG_TYPE, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }]);

  return ERR_INVALID_ARG_TYPE;
}(_wrapNativeSuper(TypeError));

var ERR_INVALID_URL_SCHEME =
/*#__PURE__*/
function (_TypeError4) {
  _inherits(ERR_INVALID_URL_SCHEME, _TypeError4);

  function ERR_INVALID_URL_SCHEME(expected) {
    var _this4;

    _classCallCheck(this, ERR_INVALID_URL_SCHEME);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ERR_INVALID_URL_SCHEME).call(this, "The URL must be of scheme ".concat(expected)));
    _this4.code = 'ERR_INVALID_URL_SCHEME';
    return _this4;
  }

  _createClass(ERR_INVALID_URL_SCHEME, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }]);

  return ERR_INVALID_URL_SCHEME;
}(_wrapNativeSuper(TypeError));

var isURLInstance = function isURLInstance(input) {
  return input != null && input.href && input.origin;
};

var getPathFromURLWin32 = function getPathFromURLWin32(url) {
  var hostname = url.hostname;
  var pathname = url.pathname;

  for (var n = 0; n < pathname.length; n++) {
    if (pathname[n] === '%') {
      var third = pathname.codePointAt(n + 2) | 0x20;

      if (pathname[n + 1] === '2' && third === 102 || pathname[n + 1] === '5' && third === 99) {
        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\ or / characters');
      }
    }
  }

  pathname = pathname.replace(/\//g, '\\');
  pathname = decodeURIComponent(pathname);

  if (hostname !== '') {
    return "\\\\".concat(domainToUnicode(hostname)).concat(pathname);
  }

  var letter = pathname.codePointAt(1) | 0x20;
  var sep = pathname[2];

  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z || sep !== ':') {
    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');
  }

  return pathname.slice(1);
};

var getPathFromURLPosix = function getPathFromURLPosix(url) {
  if (url.hostname !== '') {
    throw new ERR_INVALID_FILE_URL_HOST(process.platform);
  }

  var pathname = url.pathname;

  for (var n = 0; n < pathname.length; n++) {
    if (pathname[n] === '%') {
      var third = pathname.codePointAt(n + 2) | 0x20;

      if (pathname[n + 1] === '2' && third === 102) {
        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters');
      }
    }
  }

  return decodeURIComponent(pathname);
};

var fileURLToPath = function fileURLToPath(path) {
  if (typeof path === 'string') {
    path = new URL(path);
  } else if (!isURLInstance(path)) {
    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);
  }

  if (path.protocol !== 'file:') {
    throw new ERR_INVALID_URL_SCHEME('file');
  }

  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);
};

module.exports = fileURLToPath;
"use strict";

var fs = require('../fs.js');

var getOptions = require('../common/get-options.js');

var node = require('../common/node.js');

var owner = require('../common/owner.js');

var polyfill = require('./polyfill.js'); // node 10.12.0 added the options parameter, which allows recursive and mode
// properties to be passed


var useNative = node.satisfies('>=10.12.0'); // extends mkdir with the ability to specify an owner of the new dir

var mkdir = function mkdir(path, opts) {
  var options, _ref, uid, gid, result;

  return regeneratorRuntime.async(function mkdir$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = getOptions(opts, {
            copy: ['mode', 'recursive', 'owner'],
            wrap: 'mode'
          });
          _context.next = 3;
          return regeneratorRuntime.awrap(owner.validate(path, options.owner));

        case 3:
          _ref = _context.sent;
          uid = _ref.uid;
          gid = _ref.gid;

          if (!useNative) {
            _context.next = 12;
            break;
          }

          _context.next = 9;
          return regeneratorRuntime.awrap(fs.mkdir(path, options));

        case 9:
          _context.t0 = _context.sent;
          _context.next = 15;
          break;

        case 12:
          _context.next = 14;
          return regeneratorRuntime.awrap(polyfill(path, options));

        case 14:
          _context.t0 = _context.sent;

        case 15:
          result = _context.t0;
          _context.next = 18;
          return regeneratorRuntime.awrap(owner.update(path, uid, gid));

        case 18:
          return _context.abrupt("return", result);

        case 19:
        case "end":
          return _context.stop();
      }
    }
  });
};

module.exports = mkdir;
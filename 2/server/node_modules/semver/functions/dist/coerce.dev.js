"use strict";

var SemVer = require('../classes/semver');

var parse = require('./parse');

var _require = require('../internal/re'),
    re = _require.safeRe,
    t = _require.t;

var coerce = function coerce(version, options) {
  if (version instanceof SemVer) {
    return version;
  }

  if (typeof version === 'number') {
    version = String(version);
  }

  if (typeof version !== 'string') {
    return null;
  }

  options = options || {};
  var match = null;

  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    var coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
    var next;

    while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
      if (!match || next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }

      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
    } // leave it in a clean state


    coerceRtlRegex.lastIndex = -1;
  }

  if (match === null) {
    return null;
  }

  var major = match[2];
  var minor = match[3] || '0';
  var patch = match[4] || '0';
  var prerelease = options.includePrerelease && match[5] ? "-".concat(match[5]) : '';
  var build = options.includePrerelease && match[6] ? "+".concat(match[6]) : '';
  return parse("".concat(major, ".").concat(minor, ".").concat(patch).concat(prerelease).concat(build), options);
};

module.exports = coerce;
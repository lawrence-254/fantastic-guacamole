"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('minipass-fetch'),
    FetchError = _require.FetchError,
    Headers = _require.Headers,
    Request = _require.Request,
    Response = _require.Response;

var configureOptions = require('./options.js');

var fetch = require('./fetch.js');

var makeFetchHappen = function makeFetchHappen(url, opts) {
  var options = configureOptions(opts);
  var request = new Request(url, options);
  return fetch(request, options);
};

makeFetchHappen.defaults = function (defaultUrl) {
  var defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (_typeof(defaultUrl) === 'object') {
    defaultOptions = defaultUrl;
    defaultUrl = null;
  }

  var defaultedFetch = function defaultedFetch(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var finalUrl = url || defaultUrl;

    var finalOptions = _objectSpread({}, defaultOptions, {}, options, {
      headers: _objectSpread({}, defaultOptions.headers, {}, options.headers)
    });

    return makeFetchHappen(finalUrl, finalOptions);
  };

  defaultedFetch.defaults = makeFetchHappen.defaults;
  return defaultedFetch;
};

module.exports = makeFetchHappen;
module.exports.FetchError = FetchError;
module.exports.Headers = Headers;
module.exports.Request = Request;
module.exports.Response = Response;
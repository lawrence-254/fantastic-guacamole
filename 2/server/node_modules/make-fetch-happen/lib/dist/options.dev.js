"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var conditionalHeaders = ['if-modified-since', 'if-none-match', 'if-unmodified-since', 'if-match', 'if-range'];

var configureOptions = function configureOptions(opts) {
  var _opts = _objectSpread({}, opts),
      strictSSL = _opts.strictSSL,
      options = _objectWithoutProperties(_opts, ["strictSSL"]);

  options.method = options.method ? options.method.toUpperCase() : 'GET';
  options.rejectUnauthorized = strictSSL !== false;
  if (!options.retry) options.retry = {
    retries: 0
  };else if (typeof options.retry === 'string') {
    var retries = parseInt(options.retry, 10);
    if (isFinite(retries)) options.retry = {
      retries: retries
    };else options.retry = {
      retries: 0
    };
  } else if (typeof options.retry === 'number') options.retry = {
    retries: options.retry
  };else options.retry = _objectSpread({
    retries: 0
  }, options.retry);
  options.cache = options.cache || 'default';

  if (options.cache === 'default') {
    var hasConditionalHeader = Object.keys(options.headers || {}).some(function (name) {
      return conditionalHeaders.includes(name.toLowerCase());
    });
    if (hasConditionalHeader) options.cache = 'no-store';
  } // cacheManager is deprecated, but if it's set and
  // cachePath is not we should copy it to the new field


  if (options.cacheManager && !options.cachePath) options.cachePath = options.cacheManager;
  return options;
};

module.exports = configureOptions;
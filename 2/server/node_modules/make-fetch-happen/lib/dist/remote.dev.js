"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Minipass = require('minipass');

var MinipassPipeline = require('minipass-pipeline');

var fetch = require('minipass-fetch');

var promiseRetry = require('promise-retry');

var ssri = require('ssri');

var getAgent = require('./agent.js');

var pkg = require('../package.json');

var USER_AGENT = "".concat(pkg.name, "/").concat(pkg.version, " (+https://npm.im/").concat(pkg.name, ")");
var RETRY_ERRORS = ['ECONNRESET', // remote socket closed on us
'ECONNREFUSED', // remote host refused to open connection
'EADDRINUSE', // failed to bind to a local port (proxy?)
'ETIMEDOUT', // someone in the transaction is WAY TOO SLOW
'ERR_SOCKET_TIMEOUT' // same as above, but this one comes from agentkeepalive
// Known codes we do NOT retry on:
// ENOTFOUND (getaddrinfo failure. Either bad hostname, or offline)
];
var RETRY_TYPES = ['request-timeout']; // make a request directly to the remote source,
// retrying certain classes of errors as well as
// following redirects (through the cache if necessary)
// and verifying response integrity

var remoteFetch = function remoteFetch(request, options) {
  var agent = getAgent(request.url, options);
  if (!request.headers.has('connection')) request.headers.set('connection', agent ? 'keep-alive' : 'close');
  if (!request.headers.has('user-agent')) request.headers.set('user-agent', USER_AGENT); // keep our own options since we're overriding the agent
  // and the redirect mode

  var _opts = _objectSpread({}, options, {
    agent: agent,
    redirect: 'manual'
  });

  return promiseRetry(function _callee(retryHandler, attemptNum) {
    var req, res, integrityStream, isStream, isRetriable, code, isRetryError;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            req = new fetch.Request(request, _opts);
            _context.prev = 1;
            _context.next = 4;
            return regeneratorRuntime.awrap(fetch(req, _opts));

          case 4:
            res = _context.sent;

            if (_opts.integrity && res.status === 200) {
              // we got a 200 response and the user has specified an expected
              // integrity value, so wrap the response in an ssri stream to verify it
              integrityStream = ssri.integrityStream({
                integrity: _opts.integrity
              });
              res = new fetch.Response(new MinipassPipeline(res.body, integrityStream), res);
            }

            res.headers.set('x-fetch-attempts', attemptNum); // do not retry POST requests, or requests with a streaming body
            // do retry requests with a 408, 420, 429 or 500+ status in the response

            isStream = Minipass.isStream(req.body);
            isRetriable = req.method !== 'POST' && !isStream && ([408, 420, 429].includes(res.status) || res.status >= 500);

            if (!isRetriable) {
              _context.next = 12;
              break;
            }

            if (typeof options.onRetry === 'function') options.onRetry(res);
            return _context.abrupt("return", retryHandler(res));

          case 12:
            return _context.abrupt("return", res);

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](1);
            code = _context.t0.code === 'EPROMISERETRY' ? _context.t0.retried.code : _context.t0.code; // err.retried will be the thing that was thrown from above
            // if it's a response, we just got a bad status code and we
            // can re-throw to allow the retry

            isRetryError = _context.t0.retried instanceof fetch.Response || RETRY_ERRORS.includes(code) && RETRY_TYPES.includes(_context.t0.type);

            if (!(req.method === 'POST' || isRetryError)) {
              _context.next = 21;
              break;
            }

            throw _context.t0;

          case 21:
            if (typeof options.onRetry === 'function') options.onRetry(_context.t0);
            return _context.abrupt("return", retryHandler(_context.t0));

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[1, 15]]);
  }, options.retry)["catch"](function (err) {
    // don't reject for http errors, just return them
    if (err.status >= 400 && err.type !== 'system') return err;
    throw err;
  });
};

module.exports = remoteFetch;
'use strict';

var path = require('path');

var _require = require('tap'),
    test = _require.test;

var gyp = require('../lib/node-gyp');

var createConfigGypi = require('../lib/create-config-gypi');

var _createConfigGypi$tes = createConfigGypi.test,
    parseConfigGypi = _createConfigGypi$tes.parseConfigGypi,
    getCurrentConfigGypi = _createConfigGypi$tes.getCurrentConfigGypi;
test('config.gypi with no options', function _callee(t) {
  var prog, config;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          t.plan(2);
          prog = gyp();
          prog.parseArgv([]);
          _context.next = 5;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: prog,
            vsInfo: {}
          }));

        case 5:
          config = _context.sent;
          t.equal(config.target_defaults.default_configuration, 'Release');
          t.equal(config.variables.target_arch, process.arch);

        case 8:
        case "end":
          return _context.stop();
      }
    }
  });
});
test('config.gypi with --debug', function _callee2(t) {
  var prog, config;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          t.plan(1);
          prog = gyp();
          prog.parseArgv(['_', '_', '--debug']);
          _context2.next = 5;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: prog,
            vsInfo: {}
          }));

        case 5:
          config = _context2.sent;
          t.equal(config.target_defaults.default_configuration, 'Debug');

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  });
});
test('config.gypi with custom options', function _callee3(t) {
  var prog, config;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          t.plan(1);
          prog = gyp();
          prog.parseArgv(['_', '_', '--shared-libxml2']);
          _context3.next = 5;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: prog,
            vsInfo: {}
          }));

        case 5:
          config = _context3.sent;
          t.equal(config.variables.shared_libxml2, true);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('config.gypi with nodedir', function _callee4(t) {
  var nodeDir, prog, config;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          t.plan(1);
          nodeDir = path.join(__dirname, 'fixtures', 'nodedir');
          prog = gyp();
          prog.parseArgv(['_', '_', "--nodedir=".concat(nodeDir)]);
          _context4.next = 6;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: prog,
            nodeDir: nodeDir,
            vsInfo: {}
          }));

        case 6:
          config = _context4.sent;
          t.equal(config.variables.build_with_electron, true);

        case 8:
        case "end":
          return _context4.stop();
      }
    }
  });
});
test('config.gypi with --force-process-config', function _callee5(t) {
  var nodeDir, prog, config;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          t.plan(1);
          nodeDir = path.join(__dirname, 'fixtures', 'nodedir');
          prog = gyp();
          prog.parseArgv(['_', '_', '--force-process-config', "--nodedir=".concat(nodeDir)]);
          _context5.next = 6;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: prog,
            nodeDir: nodeDir,
            vsInfo: {}
          }));

        case 6:
          config = _context5.sent;
          t.equal(config.variables.build_with_electron, undefined);

        case 8:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('config.gypi parsing', function (t) {
  t.plan(1);
  var str = "# Some comments\n{'variables': {'multiline': 'A'\n'B'}}";
  var config = parseConfigGypi(str);
  t.deepEqual(config, {
    variables: {
      multiline: 'AB'
    }
  });
});
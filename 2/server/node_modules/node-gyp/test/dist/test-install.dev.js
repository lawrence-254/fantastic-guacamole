'use strict';

var _require = require('tap'),
    test = _require.test;

var _require2 = require('../lib/install'),
    _install = _require2.test.install;

var log = require('npmlog');

log.level = 'error'; // we expect a warning

test('EACCES retry once', function _callee(t) {
  var fs, Gyp;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          t.plan(3);
          fs = {
            promises: {
              stat: function stat(_) {
                var err = new Error();
                err.code = 'EACCES';
                t.ok(true);
                throw err;
              }
            }
          };
          Gyp = {
            devDir: __dirname,
            opts: {
              ensure: true
            },
            commands: {
              install: function install(argv, cb) {
                _install(fs, Gyp, argv).then(cb, cb);
              },
              remove: function remove(_, cb) {
                cb();
              }
            }
          };
          _context.prev = 3;
          _context.next = 6;
          return regeneratorRuntime.awrap(_install(fs, Gyp, []));

        case 6:
          _context.next = 12;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](3);
          t.ok(true);

          if (/"pre" versions of node cannot be installed/.test(_context.t0.message)) {
            t.ok(true);
          }

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
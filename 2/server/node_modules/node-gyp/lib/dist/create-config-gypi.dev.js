'use strict';

var fs = require('graceful-fs');

var log = require('npmlog');

var path = require('path');

function parseConfigGypi(config) {
  // translated from tools/js2c.py of Node.js
  // 1. string comments
  config = config.replace(/#.*/g, ''); // 2. join multiline strings

  config = config.replace(/'$\s+'/mg, ''); // 3. normalize string literals from ' into "

  config = config.replace(/'/g, '"');
  return JSON.parse(config);
}

function getBaseConfigGypi(_ref) {
  var gyp, nodeDir, shouldReadConfigGypi, baseConfigGypiPath, baseConfigGypi;
  return regeneratorRuntime.async(function getBaseConfigGypi$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          gyp = _ref.gyp, nodeDir = _ref.nodeDir;
          // try reading $nodeDir/include/node/config.gypi first when:
          // 1. --dist-url or --nodedir is specified
          // 2. and --force-process-config is not specified
          shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config'];

          if (!(shouldReadConfigGypi && nodeDir)) {
            _context.next = 14;
            break;
          }

          _context.prev = 3;
          baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');
          _context.next = 7;
          return regeneratorRuntime.awrap(fs.promises.readFile(baseConfigGypiPath));

        case 7:
          baseConfigGypi = _context.sent;
          return _context.abrupt("return", parseConfigGypi(baseConfigGypi.toString()));

        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](3);
          log.warn('read config.gypi', _context.t0.message);

        case 14:
          return _context.abrupt("return", JSON.parse(JSON.stringify(process.config)));

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[3, 11]]);
}

function getCurrentConfigGypi(_ref2) {
  var gyp, nodeDir, vsInfo, config, defaults, variables;
  return regeneratorRuntime.async(function getCurrentConfigGypi$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          gyp = _ref2.gyp, nodeDir = _ref2.nodeDir, vsInfo = _ref2.vsInfo;
          _context2.next = 3;
          return regeneratorRuntime.awrap(getBaseConfigGypi({
            gyp: gyp,
            nodeDir: nodeDir
          }));

        case 3:
          config = _context2.sent;

          if (!config.target_defaults) {
            config.target_defaults = {};
          }

          if (!config.variables) {
            config.variables = {};
          }

          defaults = config.target_defaults;
          variables = config.variables; // don't inherit the "defaults" from the base config.gypi.
          // doing so could cause problems in cases where the `node` executable was
          // compiled on a different machine (with different lib/include paths) than
          // the machine where the addon is being built to

          defaults.cflags = [];
          defaults.defines = [];
          defaults.include_dirs = [];
          defaults.libraries = []; // set the default_configuration prop

          if ('debug' in gyp.opts) {
            defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';
          }

          if (!defaults.default_configuration) {
            defaults.default_configuration = 'Release';
          } // set the target_arch variable


          variables.target_arch = gyp.opts.arch || process.arch || 'ia32';

          if (variables.target_arch === 'arm64') {
            defaults.msvs_configuration_platform = 'ARM64';
            defaults.xcode_configuration_platform = 'arm64';
          } // set the node development directory


          variables.nodedir = nodeDir; // disable -T "thin" static archives by default

          variables.standalone_static_library = gyp.opts.thin ? 0 : 1;

          if (process.platform === 'win32') {
            defaults.msbuild_toolset = vsInfo.toolset;

            if (vsInfo.sdk) {
              defaults.msvs_windows_target_platform_version = vsInfo.sdk;
            }

            if (variables.target_arch === 'arm64') {
              if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {
                defaults.msvs_enable_marmasm = 1;
              } else {
                log.warn('Compiling ARM64 assembly is only available in\n' + 'Visual Studio 2017 version 15.9 and above');
              }
            }

            variables.msbuild_path = vsInfo.msBuild;
          } // loop through the rest of the opts and add the unknown ones as variables.
          // this allows for module-specific configure flags like:
          //
          //   $ node-gyp configure --shared-libxml2


          Object.keys(gyp.opts).forEach(function (opt) {
            if (opt === 'argv') {
              return;
            }

            if (opt in gyp.configDefs) {
              return;
            }

            variables[opt.replace(/-/g, '_')] = gyp.opts[opt];
          });
          return _context2.abrupt("return", config);

        case 21:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function createConfigGypi(_ref3) {
  var gyp, buildDir, nodeDir, vsInfo, configFilename, configPath, config, boolsToString, prefix, json;
  return regeneratorRuntime.async(function createConfigGypi$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          boolsToString = function _ref4(k, v) {
            if (typeof v === 'boolean') {
              return String(v);
            }

            return v;
          };

          gyp = _ref3.gyp, buildDir = _ref3.buildDir, nodeDir = _ref3.nodeDir, vsInfo = _ref3.vsInfo;
          configFilename = 'config.gypi';
          configPath = path.resolve(buildDir, configFilename);
          log.verbose('build/' + configFilename, 'creating config file');
          _context3.next = 7;
          return regeneratorRuntime.awrap(getCurrentConfigGypi({
            gyp: gyp,
            nodeDir: nodeDir,
            vsInfo: vsInfo
          }));

        case 7:
          config = _context3.sent;
          log.silly('build/' + configFilename, config); // now write out the config.gypi file to the build/ dir

          prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step';
          json = JSON.stringify(config, boolsToString, 2);
          log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);
          _context3.next = 14;
          return regeneratorRuntime.awrap(fs.promises.writeFile(configPath, [prefix, json, ''].join('\n')));

        case 14:
          return _context3.abrupt("return", configPath);

        case 15:
        case "end":
          return _context3.stop();
      }
    }
  });
}

module.exports = createConfigGypi;
module.exports.test = {
  parseConfigGypi: parseConfigGypi,
  getCurrentConfigGypi: getCurrentConfigGypi
};
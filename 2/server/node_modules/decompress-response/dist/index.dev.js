'use strict';

var _require = require('stream'),
    Transform = _require.Transform,
    PassThrough = _require.PassThrough;

var zlib = require('zlib');

var mimicResponse = require('mimic-response');

module.exports = function (response) {
  var contentEncoding = (response.headers['content-encoding'] || '').toLowerCase();

  if (!['gzip', 'deflate', 'br'].includes(contentEncoding)) {
    return response;
  } // TODO: Remove this when targeting Node.js 12.


  var isBrotli = contentEncoding === 'br';

  if (isBrotli && typeof zlib.createBrotliDecompress !== 'function') {
    response.destroy(new Error('Brotli is not supported on Node.js < 12'));
    return response;
  }

  var isEmpty = true;
  var checker = new Transform({
    transform: function transform(data, _encoding, callback) {
      isEmpty = false;
      callback(null, data);
    },
    flush: function flush(callback) {
      callback();
    }
  });
  var finalStream = new PassThrough({
    autoDestroy: false,
    destroy: function destroy(error, callback) {
      response.destroy();
      callback(error);
    }
  });
  var decompressStream = isBrotli ? zlib.createBrotliDecompress() : zlib.createUnzip();
  decompressStream.once('error', function (error) {
    if (isEmpty && !response.readable) {
      finalStream.end();
      return;
    }

    finalStream.destroy(error);
  });
  mimicResponse(response, finalStream);
  response.pipe(checker).pipe(decompressStream).pipe(finalStream);
  return finalStream;
};
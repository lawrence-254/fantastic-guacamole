'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _require = require('util'),
    promisify = _require.promisify;

var handler = {
  get: function get(target, prop, receiver) {
    if (typeof target[prop] !== 'function') {
      return target[prop];
    }

    if (target[prop][promisify.custom]) {
      return function () {
        return Reflect.get(target, prop, receiver)[promisify.custom].apply(target, arguments);
      };
    }

    return function () {
      var _arguments = arguments;
      return new Promise(function (resolve, reject) {
        Reflect.get(target, prop, receiver).apply(target, [].concat(_toConsumableArray(_arguments), [function (err, result) {
          if (err) {
            return reject(err);
          }

          resolve(result);
        }]));
      });
    };
  }
};

module.exports = function (thingToPromisify) {
  if (typeof thingToPromisify === 'function') {
    return promisify(thingToPromisify);
  }

  if (_typeof(thingToPromisify) === 'object') {
    return new Proxy(thingToPromisify, handler);
  }

  throw new TypeError('Can only promisify functions or objects');
};
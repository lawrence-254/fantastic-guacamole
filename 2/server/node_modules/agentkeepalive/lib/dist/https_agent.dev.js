'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var OriginalHttpsAgent = require('https').Agent;

var HttpAgent = require('./agent');

var _require = require('./constants'),
    INIT_SOCKET = _require.INIT_SOCKET,
    CREATE_HTTPS_CONNECTION = _require.CREATE_HTTPS_CONNECTION;

var HttpsAgent =
/*#__PURE__*/
function (_HttpAgent) {
  _inherits(HttpsAgent, _HttpAgent);

  function HttpsAgent(options) {
    var _this;

    _classCallCheck(this, HttpsAgent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HttpsAgent).call(this, options));
    _this.defaultPort = 443;
    _this.protocol = 'https:';
    _this.maxCachedSessions = _this.options.maxCachedSessions;
    /* istanbul ignore next */

    if (_this.maxCachedSessions === undefined) {
      _this.maxCachedSessions = 100;
    }

    _this._sessionCache = {
      map: {},
      list: []
    };
    return _this;
  }

  _createClass(HttpsAgent, [{
    key: "createConnection",
    value: function createConnection(options, oncreate) {
      var socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);
      this[INIT_SOCKET](socket, options);
      return socket;
    }
  }]);

  return HttpsAgent;
}(HttpAgent); // https://github.com/nodejs/node/blob/master/lib/https.js#L89


HttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;
['getName', '_getSession', '_cacheSession', // https://github.com/nodejs/node/pull/4982
'_evictSession'].forEach(function (method) {
  /* istanbul ignore next */
  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {
    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
  }
});
module.exports = HttpsAgent;
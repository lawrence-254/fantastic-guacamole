'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var index = require('./lib/entry-index');

var memo = require('./lib/memoization');

var write = require('./lib/content/write');

var Flush = require('minipass-flush');

var _require = require('minipass-collect'),
    PassThrough = _require.PassThrough;

var Pipeline = require('minipass-pipeline');

var putOpts = function putOpts(opts) {
  return _objectSpread({
    algorithms: ['sha512']
  }, opts);
};

module.exports = putData;

function putData(cache, key, data) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var _opts = opts,
      memoize = _opts.memoize;
  opts = putOpts(opts);
  return write(cache, data, opts).then(function (res) {
    return index.insert(cache, key, res.integrity, _objectSpread({}, opts, {
      size: res.size
    })).then(function (entry) {
      if (memoize) memo.put(cache, entry, data, opts);
      return res.integrity;
    });
  });
}

module.exports.stream = putStream;

function putStream(cache, key) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _opts2 = opts,
      memoize = _opts2.memoize;
  opts = putOpts(opts);
  var integrity;
  var size;
  var memoData;
  var pipeline = new Pipeline(); // first item in the pipeline is the memoizer, because we need
  // that to end first and get the collected data.

  if (memoize) {
    var memoizer = new PassThrough().on('collect', function (data) {
      memoData = data;
    });
    pipeline.push(memoizer);
  } // contentStream is a write-only, not a passthrough
  // no data comes out of it.


  var contentStream = write.stream(cache, opts).on('integrity', function (_int) {
    integrity = _int;
  }).on('size', function (s) {
    size = s;
  });
  pipeline.push(contentStream); // last but not least, we write the index and emit hash and size,
  // and memoize if we're doing that

  pipeline.push(new Flush({
    flush: function flush() {
      return index.insert(cache, key, integrity, _objectSpread({}, opts, {
        size: size
      })).then(function (entry) {
        if (memoize && memoData) memo.put(cache, entry, memoData, opts);
        if (integrity) pipeline.emit('integrity', integrity);
        if (size) pipeline.emit('size', size);
      });
    }
  }));
  return pipeline;
}
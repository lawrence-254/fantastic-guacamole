'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var contentVer = require('../../package.json')['cache-version'].content;

var hashToSegments = require('../util/hash-to-segments');

var path = require('path');

var ssri = require('ssri'); // Current format of content file path:
//
// sha512-BaSE64Hex= ->
// ~/.my-cache/content-v2/sha512/ba/da/55deadbeefc0ffee
//


module.exports = contentPath;

function contentPath(cache, integrity) {
  var sri = ssri.parse(integrity, {
    single: true
  }); // contentPath is the *strongest* algo given

  return path.join.apply(path, [contentDir(cache), sri.algorithm].concat(_toConsumableArray(hashToSegments(sri.hexDigest()))));
}

module.exports.contentDir = contentDir;

function contentDir(cache) {
  return path.join(cache, "content-v".concat(contentVer));
}
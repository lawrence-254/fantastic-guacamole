"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReceiveBuffer = void 0;

var ReceiveBuffer =
/*#__PURE__*/
function () {
  function ReceiveBuffer() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4096;

    _classCallCheck(this, ReceiveBuffer);

    this.buffer = Buffer.allocUnsafe(size);
    this.offset = 0;
    this.originalSize = size;
  }

  _createClass(ReceiveBuffer, [{
    key: "append",
    value: function append(data) {
      if (!Buffer.isBuffer(data)) {
        throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');
      }

      if (this.offset + data.length >= this.buffer.length) {
        var tmp = this.buffer;
        this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + data.length));
        tmp.copy(this.buffer);
      }

      data.copy(this.buffer, this.offset);
      return this.offset += data.length;
    }
  }, {
    key: "peek",
    value: function peek(length) {
      if (length > this.offset) {
        throw new Error('Attempted to read beyond the bounds of the managed internal data.');
      }

      return this.buffer.slice(0, length);
    }
  }, {
    key: "get",
    value: function get(length) {
      if (length > this.offset) {
        throw new Error('Attempted to read beyond the bounds of the managed internal data.');
      }

      var value = Buffer.allocUnsafe(length);
      this.buffer.slice(0, length).copy(value);
      this.buffer.copyWithin(0, length, length + this.offset - length);
      this.offset -= length;
      return value;
    }
  }, {
    key: "length",
    get: function get() {
      return this.offset;
    }
  }]);

  return ReceiveBuffer;
}();

exports.ReceiveBuffer = ReceiveBuffer;